[
  {
    "name": "alertmanagerexporter",
    "description": "Exports OTEL Events (SpanEvent in Tracing added by AddEvent API) as Alerts to [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) back-end to notify Errors or Change events.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/alertmanagerexporter/README.md"
  },
  {
    "name": "alibabacloudlogserviceexporter",
    "description": "This exporter supports sending OpenTelemetry data to [LogService](https://www.alibabacloud.com/product/log-service).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/alibabacloudlogserviceexporter/README.md"
  },
  {
    "name": "awscloudwatchlogsexporter",
    "description": "AWS CloudWatch Logs Exporter sends logs data to AWS [CloudWatch Logs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html). AWS credentials are retrieved from the [default credential chain](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/awscloudwatchlogsexporter/README.md"
  },
  {
    "name": "awsemfexporter",
    "description": "This exporter converts OpenTelemetry metrics to [AWS CloudWatch Embedded Metric Format(EMF)](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Specification.html) and then sends them directly to CloudWatch Logs using the [PutLogEvents](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html) API.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/awsemfexporter/README.md"
  },
  {
    "name": "awskinesisexporter",
    "description": "The kinesis exporter currently exports dynamic encodings to the configured kinesis stream. The exporter relies heavily on the kinesis.PutRecords api to reduce network I/O and reduces records into smallest atomic representation to avoid hitting the hard limits placed on Records (No greater than 1Mb). This producer will block until the operation is done to allow for retryable and queued data to help during high loads.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/awskinesisexporter/README.md"
  },
  {
    "name": "awss3exporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/awss3exporter/README.md"
  },
  {
    "name": "awsxrayexporter",
    "description": "This exporter converts OpenTelemetry spans to [AWS X-Ray Segment Documents](https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html) and then sends them directly to X-Ray using the [PutTraceSegments](https://docs.aws.amazon.com/xray/latest/api/API_PutTraceSegments.html) API.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/awsxrayexporter/README.md"
  },
  {
    "name": "azureblobexporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/azureblobexporter/README.md"
  },
  {
    "name": "azuredataexplorerexporter",
    "description": "This exporter sends metrics, logs and trace data to [Azure Data Explorer](https://docs.microsoft.com/en-us/azure/data-explorer), [Azure Synapse Data Explorer](https://docs.microsoft.com/en-us/azure/synapse-analytics/data-explorer/data-explorer-overview) and [Real time analytics in Fabric](https://learn.microsoft.com/en-us/fabric/real-time-analytics/overview)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/azuredataexplorerexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "ClusterURI",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "cluster_uri"
        },
        {
          "name": "ApplicationID",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "application_id"
        },
        {
          "name": "ApplicationKey",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "application_key"
        },
        {
          "name": "TenantID",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "tenant_id"
        },
        {
          "name": "ManagedIdentityID",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "managed_identity_id"
        },
        {
          "name": "UseAzureAuth",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "use_azure_auth"
        },
        {
          "name": "Database",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "db_name"
        },
        {
          "name": "MetricTable",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "metrics_table_name"
        },
        {
          "name": "LogTable",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "logs_table_name"
        },
        {
          "name": "TraceTable",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "traces_table_name"
        },
        {
          "name": "MetricTableMapping",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "metrics_table_json_mapping"
        },
        {
          "name": "LogTableMapping",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "logs_table_json_mapping"
        },
        {
          "name": "TraceTableMapping",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "traces_table_json_mapping"
        },
        {
          "name": "IngestionType",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "ingestion_type"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "strings",
        "github.com/google/uuid",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "azuredataexplorerexporter"
    }
  },
  {
    "name": "azuremonitorexporter",
    "description": "This exporter sends logs, traces and metrics to [Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/azuremonitorexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "Endpoint",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "ConnectionString",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "connection_string"
        },
        {
          "name": "InstrumentationKey",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "instrumentation_key"
        },
        {
          "name": "MaxBatchSize",
          "type": "int",
          "description": "",
          "required": true,
          "mapstructureTag": "maxbatchsize"
        },
        {
          "name": "MaxBatchInterval",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "maxbatchinterval"
        },
        {
          "name": "SpanEventsEnabled",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "spaneventsenabled"
        },
        {
          "name": "ShutdownTimeout",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "shutdown_timeout"
        },
        {
          "name": "CustomEventsEnabled",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "custom_events_enabled"
        }
      ],
      "imports": [
        "time",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "azuremonitorexporter"
    }
  },
  {
    "name": "bmchelixexporter",
    "description": "This exporter supports sending metrics to [BMC Helix Operations Management](https://www.bmc.com/it-solutions/bmc-helix-operations-management.html) through its [metric ingestion REST API](https://docs.bmc.com/docs/helixoperationsmanagement/244/en/metric-operation-management-endpoints-in-the-rest-api-1392780044.html).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/bmchelixexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "APIKey",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "api_key"
        },
        {
          "name": "RetryConfig",
          "type": "configretry.BackOffConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "retry_on_failure"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configretry"
      ],
      "packageName": "bmchelixexporter"
    }
  },
  {
    "name": "carbonexporter",
    "description": "The [Carbon](https://github.com/graphite-project/carbon) exporter supports Carbon's [plaintext protocol](https://graphite.readthedocs.io/en/stable/feeding-carbon.html#the-plaintext-protocol).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/carbonexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "MaxIdleConns",
          "type": "int",
          "description": "Specifies the connection endpoint config. The default value is \"localhost:2003\". MaxIdleConns is used to set a limit to the maximum idle TCP connections the client can keep open. Default value is 100. If `sending_queue` is enabled, it is recommended to use same value as `sending_queue::num_consumers`.",
          "required": true,
          "mapstructureTag": "max_idle_conns"
        },
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "Timeout is the maximum duration allowed to connecting and sending the data to the Carbon/Graphite backend. The default value is 5s.",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "QueueConfig",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "RetryConfig",
          "type": "configretry.BackOffConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "retry_on_failure"
        },
        {
          "name": "ResourceToTelemetryConfig",
          "type": "resourcetotelemetry.Settings",
          "description": "ResourceToTelemetrySettings defines configuration for converting resource attributes to metric labels.",
          "required": true,
          "mapstructureTag": "resource_to_telemetry_conversion"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/pkg/resourcetotelemetry"
      ],
      "packageName": "carbonexporter"
    }
  },
  {
    "name": "cassandraexporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/cassandraexporter/README.md"
  },
  {
    "name": "clickhouseexporter",
    "description": "This exporter supports sending OpenTelemetry data to [ClickHouse](https://clickhouse.com/). > ClickHouse is an open-source, high performance columnar OLAP database management system for real-time analytics using > SQL. > Throughput can be measured in rows per second or megabytes per second. > If the data is placed in the page cache, a query that is not too complex is processed on modern hardware at a speed of > approximately 2-10 GB/s of uncompressed data on a single server. > If 10 bytes of columns are extracted, the speed is expected to be around 100-200 million rows per second.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/clickhouseexporter/README.md"
  },
  {
    "name": "coralogixexporter",
    "description": "The Coralogix exporter sends traces, metrics and logs to [Coralogix](https://coralogix.com/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/coralogixexporter/README.md"
  },
  {
    "name": "datadogexporter",
    "description": "> Please review the Collector's [security documentation](https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md), which contains recommendations on securing sensitive information such as the API key required by this exporter.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/datadogexporter/README.md"
  },
  {
    "name": "datasetexporter",
    "description": "This exporter sends logs to [DataSet](https://www.dataset.com/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/datasetexporter/README.md"
  },
  {
    "name": "dorisexporter",
    "description": "This exporter supports sending traces, metrics, and logs data to [Apache Doris](https://doris.apache.org/) (version >= 2.1.1).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/dorisexporter/README.md"
  },
  {
    "name": "elasticsearchexporter",
    "description": "This exporter supports sending logs, metrics, traces and profiles to [Elasticsearch](https://www.elastic.co/elasticsearch).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/elasticsearchexporter/README.md"
  },
  {
    "name": "faroexporter",
    "description": "The Faro exporter sends telemetry data to a [Faro](https://grafana.com/oss/faro/) endpoint.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/faroexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueConfig",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "RetryConfig",
          "type": "configretry.BackOffConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "retry_on_failure"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/confmap",
        "go.opentelemetry.io/collector/exporter/exporterhelper",
        "go.uber.org/multierr"
      ],
      "packageName": "faroexporter"
    }
  },
  {
    "name": "fileexporter",
    "description": "Writes telemetry data to files on disk.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/fileexporter/README.md"
  },
  {
    "name": "googlecloudexporter",
    "description": "This exporter can be used to send metrics to [Google Cloud Monitoring](https://cloud.google.com/monitoring) (formerly Stackdriver), traces to [Google Cloud Trace](https://cloud.google.com/trace), and logs to [Google Cloud Logging](https://cloud.google.com/logging).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/googlecloudexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "Timeout for all API calls. If not set, defaults to 12 seconds.",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        }
      ],
      "imports": [
        "fmt",
        "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/collector",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "googlecloudexporter"
    }
  },
  {
    "name": "googlecloudpubsubexporter",
    "description": "> ⚠️ This is a community-provided module. It has been developed and extensively tested at Collibra, but it is not officially supported by GCP.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/googlecloudpubsubexporter/README.md"
  },
  {
    "name": "googlemanagedprometheusexporter",
    "description": "This exporter can be used to send metrics (including trace exemplars) to [Google Cloud Managed Service for Prometheus](https://cloud.google.com/stackdriver/docs/managed-prometheus). It is one of [several supported approaches for sending metrics to Google Cloud Managed Service for Prometheus](https://cloud.google.com/stackdriver/docs/managed-prometheus#gmp-data-collection).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/googlemanagedprometheusexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "Timeout for all API calls. If not set, defaults to 12 seconds.",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        }
      ],
      "imports": [
        "fmt",
        "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/collector",
        "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/collector/googlemanagedprometheus",
        "go.opentelemetry.io/collector/exporter/exporterhelper",
        "go.opentelemetry.io/collector/pdata/pmetric",
        "github.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/prometheus"
      ],
      "packageName": "googlemanagedprometheusexporter"
    }
  },
  {
    "name": "honeycombmarkerexporter",
    "description": "This exporter allows creating [markers](https://docs.honeycomb.io/working-with-your-data/markers/), via the [Honeycomb Markers API](https://docs.honeycomb.io/api/tag/Markers#operation/createMarker), based on the look of incoming telemetry.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/honeycombmarkerexporter/README.md"
  },
  {
    "name": "influxdbexporter",
    "description": "This exporter supports sending tracing, metrics, and logging data to [InfluxDB](https://www.influxdata.com/products/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/influxdbexporter/README.md"
  },
  {
    "name": "kafkaexporter",
    "description": "Kafka exporter exports logs, metrics, and traces to Kafka. This exporter uses a synchronous producer that blocks and does not batch messages, therefore it should be used with batch and queued retry processors for higher throughput and resiliency. Message payload encoding is configurable.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kafkaexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "Producer",
          "type": "configkafka.ProducerConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "producer"
        },
        {
          "name": "Topic",
          "type": "string",
          "description": "The name of the kafka topic to export to (default otlp_spans for traces, otlp_metrics for metrics)",
          "required": true,
          "mapstructureTag": "topic"
        },
        {
          "name": "TopicFromAttribute",
          "type": "string",
          "description": "TopicFromAttribute is the name of the attribute to use as the topic name.",
          "required": true,
          "mapstructureTag": "topic_from_attribute"
        },
        {
          "name": "Encoding",
          "type": "string",
          "description": "Encoding of messages (default \"otlp_proto\")",
          "required": true,
          "mapstructureTag": "encoding"
        },
        {
          "name": "PartitionTracesByID",
          "type": "bool",
          "description": "PartitionTracesByID sets the message key of outgoing trace messages to the trace ID. Please note: does not have any effect on Jaeger encoding exporters since Jaeger exporters include trace ID as the message key by default.",
          "required": true,
          "mapstructureTag": "partition_traces_by_id"
        },
        {
          "name": "PartitionMetricsByResourceAttributes",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "partition_metrics_by_resource_attributes"
        },
        {
          "name": "PartitionLogsByResourceAttributes",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "partition_logs_by_resource_attributes"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/internal/kafka/configkafka"
      ],
      "packageName": "kafkaexporter"
    }
  },
  {
    "name": "kineticaexporter",
    "description": "- [Overview](#overview) - [Installation](#installation) - [Documentation](#documentation) - [Support](#support) - [Contact Us](#contact-us)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kineticaexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Host",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "host"
        },
        {
          "name": "Schema",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "schema"
        },
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "BypassSslCertCheck",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "bypasssslcertcheck"
        }
      ],
      "imports": [
        "errors",
        "net/url",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/configopaque"
      ],
      "packageName": "kineticaexporter"
    }
  },
  {
    "name": "loadbalancingexporter",
    "description": "This is an exporter that will consistently export spans, metrics and logs depending on the `routing_key` configured.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/loadbalancingexporter/README.md"
  },
  {
    "name": "logicmonitorexporter",
    "description": "This exporter supports sending traces & logs to [Logicmonitor](https://www.logicmonitor.com/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/logicmonitorexporter/README.md"
  },
  {
    "name": "logzioexporter",
    "description": "This exporter supports sending trace and log data to [Logz.io](https://www.logz.io)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/logzioexporter/README.md"
  },
  {
    "name": "lokiexporter",
    "description": "Exports data via HTTP to [Loki](https://grafana.com/docs/loki/latest/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/lokiexporter/README.md"
  },
  {
    "name": "mezmoexporter",
    "description": "This exporter supports sending OpenTelemetry log data to [Mezmo](https://mezmo.com).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/mezmoexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "IngestURL",
          "type": "string",
          "description": "IngestURL is the URL to send telemetry to.",
          "required": true,
          "mapstructureTag": "ingest_url"
        },
        {
          "name": "IngestKey",
          "type": "configopaque.String",
          "description": "Token is the authentication token provided by Mezmo.",
          "required": true,
          "mapstructureTag": "ingest_key"
        }
      ],
      "imports": [
        "fmt",
        "net/url",
        "time",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "mezmoexporter"
    }
  },
  {
    "name": "opencensusexporter",
    "description": ":warning: This component is deprecated, slated for removal in August 2025. Please use the OTLP receiver instead.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/opencensusexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "NumWorkers",
          "type": "int",
          "description": "The number of workers that send the gRPC requests.",
          "required": true,
          "mapstructureTag": "num_workers"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/configgrpc",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "opencensusexporter"
    }
  },
  {
    "name": "opensearchexporter",
    "description": "OpenSearch exporter supports sending OpenTelemetry signals as documents to [OpenSearch](https://www.opensearch.org).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/opensearchexporter/README.md"
  },
  {
    "name": "otelarrowexporter",
    "description": "Exports telemetry data using [OpenTelemetry Protocol with Apache Arrow](https://github.com/open-telemetry/otel-arrow) components with support for both OpenTelemetry Protocol with Apache Arrow and standard [OpenTelemetry Protocol]( https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md) (OTLP) protocol via gRPC.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/otelarrowexporter/README.md"
  },
  {
    "name": "prometheusexporter",
    "description": "Exports data in the [Prometheus format](https://prometheus.io/docs/concepts/data_model/), which allows it to be scraped by a [Prometheus](https://prometheus.io/) server.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/prometheusexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Namespace",
          "type": "string",
          "description": "Namespace if set, exports metrics under the provided value.",
          "required": true,
          "mapstructureTag": "namespace"
        },
        {
          "name": "ConstLabels",
          "type": "prometheus.Labels",
          "description": "ConstLabels are values that are applied for every exported metric.",
          "required": true,
          "mapstructureTag": "const_labels"
        },
        {
          "name": "SendTimestamps",
          "type": "bool",
          "description": "SendTimestamps will send the underlying scrape timestamp with the export",
          "required": true,
          "mapstructureTag": "send_timestamps"
        },
        {
          "name": "MetricExpiration",
          "type": "time.Duration",
          "description": "MetricExpiration defines how long metrics are kept without updates",
          "required": true,
          "mapstructureTag": "metric_expiration"
        },
        {
          "name": "ResourceToTelemetrySettings",
          "type": "resourcetotelemetry.Settings",
          "description": "ResourceToTelemetrySettings defines configuration for converting resource attributes to metric labels.",
          "required": true,
          "mapstructureTag": "resource_to_telemetry_conversion"
        },
        {
          "name": "EnableOpenMetrics",
          "type": "bool",
          "description": "EnableOpenMetrics enables the use of the OpenMetrics encoding option for the prometheus exporter.",
          "required": true,
          "mapstructureTag": "enable_open_metrics"
        },
        {
          "name": "AddMetricSuffixes",
          "type": "bool",
          "description": "AddMetricSuffixes controls whether suffixes are added to metric names. Defaults to true.",
          "required": true,
          "mapstructureTag": "add_metric_suffixes"
        }
      ],
      "imports": [
        "time",
        "github.com/prometheus/client_golang/prometheus",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confighttp",
        "github.com/open-telemetry/opentelemetry-collector-contrib/pkg/resourcetotelemetry"
      ],
      "packageName": "prometheusexporter"
    }
  },
  {
    "name": "prometheusremotewriteexporter",
    "description": "Prometheus Remote Write Exporter sends OpenTelemetry metrics to Prometheus [remote write compatible backends](https://prometheus.io/docs/operating/integrations/) such as Cortex, Mimir, and Thanos. By default, this exporter requires TLS and offers queued retry capabilities.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/prometheusremotewriteexporter/README.md"
  },
  {
    "name": "pulsarexporter",
    "description": "Pulsar exporter exports logs, metrics, and traces to [Apache Pulsar](https://pulsar.apache.org/). This exporter uses a synchronous producer that blocks and able to batch messages.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/pulsarexporter/README.md"
  },
  {
    "name": "rabbitmqexporter",
    "description": "Exports metrics, traces, and logs to [RabbitMQ](https://www.rabbitmq.com/) using the AMQP 0.9.1 protocol.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/rabbitmqexporter/README.md"
  },
  {
    "name": "sapmexporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/sapmexporter/README.md"
  },
  {
    "name": "sematextexporter",
    "description": "This exporter supports sending metrics to [Sematext Cloud](https://sematext.com/) in Influx line protocol format and logs using the Bulk Index Api format.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/sematextexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "Region",
          "type": "string",
          "description": "Region specifies the Sematext region the user is operating in Options: - EU - US",
          "required": true,
          "mapstructureTag": "region"
        }
      ],
      "imports": [
        "fmt",
        "regexp",
        "strings",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "sematextexporter"
    }
  },
  {
    "name": "sentryexporter",
    "description": "The Sentry Exporter allows you to send traces to [Sentry](https://sentry.io/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/sentryexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "DSN",
          "type": "string",
          "description": "DSN to report transaction to Sentry. If the DSN is not set, no trace will be sent to Sentry.",
          "required": true,
          "mapstructureTag": "dsn"
        },
        {
          "name": "Environment",
          "type": "string",
          "description": "The deployment environment name, such as production or staging. Environments are case-sensitive. The environment name can't contain newlines, spaces or forward slashes, can't be the string \"None\", or exceed 64 characters.",
          "required": true,
          "mapstructureTag": "environment"
        },
        {
          "name": "InsecureSkipVerify",
          "type": "bool",
          "description": "InsecureSkipVerify controls whether the client verifies the Sentry server certificate chain",
          "required": true,
          "mapstructureTag": "insecure_skip_verify"
        }
      ],
      "imports": [
        "errors"
      ],
      "packageName": "sentryexporter"
    }
  },
  {
    "name": "signalfxexporter",
    "description": "This exporter can be used to send metrics, events, and trace correlation to SignalFx.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/signalfxexporter/README.md"
  },
  {
    "name": "splunkhecexporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/splunkhecexporter/README.md"
  },
  {
    "name": "stefexporter",
    "description": "Export data via gRPC using [Otel/STEF format](https://github.com/splunk/stef/tree/main/go/otel) format.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/stefexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueConfig",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "RetryConfig",
          "type": "configretry.BackOffConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "retry_on_failure"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net",
        "regexp",
        "strconv",
        "strings",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/configgrpc",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "stefexporter"
    }
  },
  {
    "name": "sumologicexporter",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/sumologicexporter/README.md"
  },
  {
    "name": "syslogexporter",
    "description": "The Syslog exporter sends logs in [syslog][syslog_wikipedia] format to a remote syslog server. It supports syslog protocols [RFC5424][RFC5424] and [RFC3164][RFC3164] and can send data over `TCP` or `UDP`. The exporter aims to be compatible with the [Syslog receiver][syslog_receiver]. This means that syslog messages received via the Syslog receiver and exported via the Syslog exporter should be unchanged.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/syslogexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Endpoint",
          "type": "string",
          "description": "Syslog server address",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "Port",
          "type": "int",
          "description": "Syslog server port",
          "required": true,
          "mapstructureTag": "port"
        },
        {
          "name": "Network",
          "type": "string",
          "description": "Network for syslog communication options: tcp, udp",
          "required": true,
          "mapstructureTag": "network"
        },
        {
          "name": "Protocol",
          "type": "string",
          "description": "Protocol of syslog messages options: rfc5424, rfc3164",
          "required": true,
          "mapstructureTag": "protocol"
        },
        {
          "name": "EnableOctetCounting",
          "type": "bool",
          "description": "Whether or not to enable RFC 6587 Octet Counting.",
          "required": true,
          "mapstructureTag": "enable_octet_counting"
        },
        {
          "name": "TLSSetting",
          "type": "configtls.ClientConfig",
          "description": "TLSSetting struct exposes TLS client configuration.",
          "required": true,
          "mapstructureTag": "tls"
        },
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        }
      ],
      "imports": [
        "errors",
        "strings",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "syslogexporter"
    }
  },
  {
    "name": "tencentcloudlogserviceexporter",
    "description": "This exporter supports sending OpenTelemetry log data to [LogService](https://cloud.tencent.com/product/cls).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/tencentcloudlogserviceexporter/README.md"
  },
  {
    "name": "zipkinexporter",
    "description": "Exports data to a [Zipkin](https://zipkin.io/) back-end. By default, this exporter requires TLS and offers queued retry capabilities.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/zipkinexporter/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "QueueSettings",
          "type": "exporterhelper.QueueBatchConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "sending_queue"
        },
        {
          "name": "Format",
          "type": "string",
          "description": "Configures the exporter client. The Endpoint to send the Zipkin trace data to (e.g.: http://some.url:9411/api/v2/spans).",
          "required": true,
          "mapstructureTag": "format"
        },
        {
          "name": "DefaultServiceName",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "default_service_name"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configretry",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "zipkinexporter"
    }
  }
]