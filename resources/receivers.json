[
  {
    "name": "activedirectorydsreceiver",
    "description": "The `active_directory_ds` receiver scrapes metrics relating to an Active Directory domain controller using the Windows Performance Counters.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/activedirectorydsreceiver/README.md"
  },
  {
    "name": "aerospikereceiver",
    "description": "The Aerospike receiver is designed to collect performance metrics from one or more Aerospike nodes. It uses the [official Go client](https://github.com/aerospike/aerospike-client-go/tree/v5/) to connect and collect.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/aerospikereceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Endpoint",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "TLSName",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "tlsname"
        },
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "CollectClusterMetrics",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "collect_cluster_metrics"
        },
        {
          "name": "Timeout",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "timeout"
        },
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "TLS",
          "type": "*configtls.ClientConfig",
          "description": "",
          "required": false,
          "mapstructureTag": "tls,omitempty"
        }
      ],
      "imports": [
        "context",
        "errors",
        "fmt",
        "net",
        "strconv",
        "time",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/aerospikereceiver/internal/metadata"
      ],
      "packageName": "aerospikereceiver"
    }
  },
  {
    "name": "apachereceiver",
    "description": "This receiver fetches stats from a Apache Web Server instance using the `server-status?auto` endpoint.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/apachereceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        }
      ],
      "imports": [
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/apachereceiver/internal/metadata"
      ],
      "packageName": "apachereceiver"
    }
  },
  {
    "name": "apachesparkreceiver",
    "description": "This receiver fetches metrics for an Apache Spark cluster through the Apache Spark REST API - specifically, the `/metrics/json`, `/api/v1/applications/[app-id]/stages`, `/api/v1/applications/[app-id]/executors`, and `/api/v1/applications/[app-id]/jobs` endpoints.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/apachesparkreceiver/README.md"
  },
  {
    "name": "awscloudwatchmetricsreceiver",
    "description": "Receives Cloudwatch metrics from [AWS Cloudwatch](https://aws.amazon.com/cloudwatch/) via the [AWS SDK for Cloudwatch Logs](https://docs.aws.amazon.com/sdk-for-go/api/service/cloudwatchlogs/)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awscloudwatchmetricsreceiver/README.md"
  },
  {
    "name": "awscloudwatchreceiver",
    "description": "Receives Cloudwatch events from [AWS Cloudwatch](https://aws.amazon.com/cloudwatch/) via the [AWS SDK for Cloudwatch Logs](https://docs.aws.amazon.com/sdk-for-go/api/service/cloudwatchlogs/)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awscloudwatchreceiver/README.md"
  },
  {
    "name": "awscontainerinsightreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awscontainerinsightreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "CollectionInterval",
          "type": "time.Duration",
          "description": "CollectionInterval is the interval at which metrics should be collected. The default is 60 second.",
          "required": true,
          "mapstructureTag": "collection_interval"
        },
        {
          "name": "ContainerOrchestrator",
          "type": "string",
          "description": "ContainerOrchestrator is the type of container orchestration service, e.g. eks or ecs. The default is eks.",
          "required": true,
          "mapstructureTag": "container_orchestrator"
        },
        {
          "name": "TagService",
          "type": "bool",
          "description": "Whether to add the associated service name as attribute. The default is true",
          "required": true,
          "mapstructureTag": "add_service_as_attribute"
        },
        {
          "name": "PrefFullPodName",
          "type": "bool",
          "description": "The \"PodName\" attribute is set based on the name of the relevant controllers like Daemonset, Job, ReplicaSet, ReplicationController, ... If it cannot be set that way and PrefFullPodName is true, the \"PodName\" attribute is set to the pod's own name. The default value is false",
          "required": true,
          "mapstructureTag": "prefer_full_pod_name"
        },
        {
          "name": "AddFullPodNameMetricLabel",
          "type": "bool",
          "description": "The \"FullPodName\" attribute is the pod name including suffix If false FullPodName label is not added The default value is false",
          "required": true,
          "mapstructureTag": "add_full_pod_name_metric_label"
        }
      ],
      "imports": [
        "time"
      ],
      "packageName": "awscontainerinsightreceiver"
    }
  },
  {
    "name": "awsecscontainermetricsreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awsecscontainermetricsreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "CollectionInterval",
          "type": "time.Duration",
          "description": "CollectionInterval is the interval at which metrics should be collected",
          "required": true,
          "mapstructureTag": "collection_interval"
        }
      ],
      "imports": [
        "time"
      ],
      "packageName": "awsecscontainermetricsreceiver"
    }
  },
  {
    "name": "awsfirehosereceiver",
    "description": "Receiver for ingesting AWS Kinesis Data Firehose delivery stream messages and parsing the records received based on the configured record type.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awsfirehosereceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Encoding",
          "type": "string",
          "description": "ServerConfig is used to set up the Firehose delivery endpoint. The Firehose delivery stream expects an HTTPS endpoint, so TLSSettings must be used to enable that. Encoding identifies the encoding of records received from Firehose. Defaults to telemetry-specific encodings: \"cwlog\" for logs, and \"cwmetrics\" for metrics.",
          "required": true,
          "mapstructureTag": "encoding"
        },
        {
          "name": "RecordType",
          "type": "string",
          "description": "RecordType is an alias for Encoding for backwards compatibility. It is an error to specify both encoding and record_type. Deprecated: [v0.121.0] use Encoding instead.",
          "required": true,
          "mapstructureTag": "record_type"
        },
        {
          "name": "AccessKey",
          "type": "configopaque.String",
          "description": "AccessKey is checked against the one received with each request. This can be set when creating or updating the Firehose delivery stream.",
          "required": true,
          "mapstructureTag": "access_key"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.uber.org/zap"
      ],
      "packageName": "awsfirehosereceiver"
    }
  },
  {
    "name": "awss3receiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awss3receiver/README.md"
  },
  {
    "name": "awsxrayreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/awsxrayreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ProxyServer",
          "type": "*proxy.Config",
          "description": "The `NetAddr` represents the UDP address and port on which this receiver listens for X-Ray segment documents emitted by the X-Ray SDK. ProxyServer defines configurations related to the local TCP proxy server.",
          "required": true,
          "mapstructureTag": "proxy_server"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/config/confignet",
        "github.com/open-telemetry/opentelemetry-collector-contrib/internal/aws/proxy"
      ],
      "packageName": "awsxrayreceiver"
    }
  },
  {
    "name": "azureblobreceiver",
    "description": "This receiver reads logs and trace data from [Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/azureblobreceiver/README.md"
  },
  {
    "name": "azureeventhubreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/azureeventhubreceiver/README.md"
  },
  {
    "name": "azuremonitorreceiver",
    "description": "This receiver scrapes Azure Monitor API for resources metrics.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/azuremonitorreceiver/README.md"
  },
  {
    "name": "bigipreceiver",
    "description": "This receiver fetches stats from a F5 Big-IP node using F5's [iControl REST API](https://clouddocs.f5.com/api/icontrol-rest).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/bigipreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/bigipreceiver/internal/metadata"
      ],
      "packageName": "bigipreceiver"
    }
  },
  {
    "name": "carbonreceiver",
    "description": "The [Carbon](https://github.com/graphite-project/carbon) receiver supports Carbon's [plaintext protocol](https://graphite.readthedocs.io/en/stable/feeding-carbon.html#the-plaintext-protocol).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/carbonreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TCPIdleTimeout",
          "type": "time.Duration",
          "description": "TCPIdleTimeout is the timeout for idle TCP connections, it is ignored if transport being used is UDP.",
          "required": true,
          "mapstructureTag": "tcp_idle_timeout"
        },
        {
          "name": "Parser",
          "type": "*protocol.Config",
          "description": "Parser specifies a parser and the respective configuration to be used by the receiver.",
          "required": true,
          "mapstructureTag": "parser"
        }
      ],
      "imports": [
        "errors",
        "time",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/confmap/xconfmap",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/carbonreceiver/protocol"
      ],
      "packageName": "carbonreceiver"
    }
  },
  {
    "name": "chronyreceiver",
    "description": "The [chrony] receiver is a pure go implementation of the command `chronyc tracking` to allow for portability across systems and platforms. All of the data that would typically be captured by the tracking command is made available in this receiver, see [documentation](./documentation.md) for more details.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/chronyreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Endpoint",
          "type": "string",
          "description": "Endpoint is the published address or unix socket that allows clients to connect to: The allowed format is: unix:///path/to/chronyd/unix.sock udp://localhost:323 The default value is unix:///var/run/chrony/chronyd.sock",
          "required": true,
          "mapstructureTag": "endpoint"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "time",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/chronyreceiver/internal/chrony",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/chronyreceiver/internal/metadata"
      ],
      "packageName": "chronyreceiver"
    }
  },
  {
    "name": "cloudflarereceiver",
    "description": "This Cloudflare receiver allows Cloudflare's [LogPush Jobs](https://developers.cloudflare.com/logs/logpush/) to send logs over HTTPS from the Cloudflare logs aggregation system to an OpenTelemetry collector.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/cloudflarereceiver/README.md"
  },
  {
    "name": "cloudfoundryreceiver",
    "description": "The Cloud Foundry receiver connects to the RLP (Reverse Log Proxy) Gateway of the Cloud Foundry installation, typically available at the URL `https://log-stream.<cf-system-domain>`.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/cloudfoundryreceiver/README.md"
  },
  {
    "name": "collectdreceiver",
    "description": "This receiver can receive data exported by the CollectD's `write_http` plugin. Only JSON format is supported. Authentication is not supported at this time.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/collectdreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Timeout",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "timeout"
        },
        {
          "name": "Encoding",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "encoding"
        },
        {
          "name": "AttributesPrefix",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "attributes_prefix"
        }
      ],
      "imports": [
        "fmt",
        "strings",
        "time",
        "go.opentelemetry.io/collector/config/confighttp"
      ],
      "packageName": "collectdreceiver"
    }
  },
  {
    "name": "couchdbreceiver",
    "description": "This receiver fetches stats from a couchdb server using the `/_node/{node-name}/_stats/couchdb` [endpoint](https://docs.couchdb.org/en/latest/api/server/common.html#node-node-name-stats).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/couchdbreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/couchdbreceiver/internal/metadata"
      ],
      "packageName": "couchdbreceiver"
    }
  },
  {
    "name": "datadogreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/datadogreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ReadTimeout",
          "type": "time.Duration",
          "description": "ReadTimeout of the http server",
          "required": true,
          "mapstructureTag": "read_timeout"
        }
      ],
      "imports": [
        "time",
        "go.opentelemetry.io/collector/config/confighttp"
      ],
      "packageName": "datadogreceiver"
    }
  },
  {
    "name": "dockerstatsreceiver",
    "description": "The Docker Stats receiver queries the local Docker daemon's container stats API for all desired running containers on a configured interval.  These stats are for container resource usage of cpu, memory, network, and the [blkio controller](https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/dockerstatsreceiver/README.md"
  },
  {
    "name": "elasticsearchreceiver",
    "description": "This receiver queries the Elasticsearch [node stats](https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html), [cluster health](https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html) and [index stats](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html) endpoints in order to scrape metrics from a running Elasticsearch cluster.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/elasticsearchreceiver/README.md"
  },
  {
    "name": "envoyalsreceiver",
    "description": "This is a receiver for the [Envoy gRPC ALS](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/access_loggers/grpc/v3/als.proto#envoy-v3-api-msg-extensions-access-loggers-grpc-v3-httpgrpcaccesslogconfig) sink.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/envoyalsreceiver/README.md"
  },
  {
    "name": "expvarreceiver",
    "description": "An Expvar Receiver scrapes metrics from [expvar](https://pkg.go.dev/expvar), which exposes data in JSON format from an HTTP endpoint. The metrics are extracted from the `expvar` variable [memstats](https://pkg.go.dev/runtime#MemStats), which exposes various information about the Go runtime.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/expvarreceiver/README.md"
  },
  {
    "name": "faroreceiver",
    "description": "TODO",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/faroreceiver/README.md"
  },
  {
    "name": "filelogreceiver",
    "description": "Tails and parses logs from files.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filelogreceiver/README.md"
  },
  {
    "name": "filestatsreceiver",
    "description": "The File Stats receiver collects metrics from files specified with a glob pattern.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filestatsreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Include",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "include"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/filestatsreceiver/internal/metadata"
      ],
      "packageName": "filestatsreceiver"
    }
  },
  {
    "name": "flinkmetricsreceiver",
    "description": "This receiver uses Flink's [REST API](https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/ops/metrics/#rest-api-integration) to collect Jobmanager, Taskmanager, Job, Task and Operator metrics.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/flinkmetricsreceiver/README.md"
  },
  {
    "name": "fluentforwardreceiver",
    "description": "This receiver runs a TCP server that accepts events via the [Fluent Forward protocol](https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/fluentforwardreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ListenAddress",
          "type": "string",
          "description": "The address to listen on for incoming Fluent Forward events.  Should be of the form `<ip addr>:<port>` (TCP) or `unix://<socket_path>` (Unix domain socket).",
          "required": true,
          "mapstructureTag": "endpoint"
        }
      ],
      "imports": [],
      "packageName": "fluentforwardreceiver"
    }
  },
  {
    "name": "githubreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/githubreceiver/README.md"
  },
  {
    "name": "gitlabreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/gitlabreceiver/README.md"
  },
  {
    "name": "googlecloudmonitoringreceiver",
    "description": "The primary objective of the Google Cloud Monitoring Receiver is to gather time series metrics data from all Google services and convert this data into a pipeline format that facilitates further use.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/googlecloudmonitoringreceiver/README.md"
  },
  {
    "name": "googlecloudpubsubreceiver",
    "description": "> ⚠️ This is a community-provided module. It has been developed and extensively tested at Collibra, but it is not officially supported by GCP.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/googlecloudpubsubreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ProjectID",
          "type": "string",
          "description": "Google Cloud Project ID where the Pubsub client will connect to",
          "required": true,
          "mapstructureTag": "project"
        },
        {
          "name": "UserAgent",
          "type": "string",
          "description": "User agent that will be used by the Pubsub client to connect to the service",
          "required": true,
          "mapstructureTag": "user_agent"
        },
        {
          "name": "Endpoint",
          "type": "string",
          "description": "Override of the Pubsub Endpoint, leave empty for the default endpoint",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "Insecure",
          "type": "bool",
          "description": "Only has effect if Endpoint is not \"\"",
          "required": true,
          "mapstructureTag": "insecure"
        },
        {
          "name": "TimeoutSettings",
          "type": "exporterhelper.TimeoutConfig",
          "description": "Timeout for all API calls. If not set, defaults to 12 seconds.",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "Subscription",
          "type": "string",
          "description": "The fully qualified resource name of the Pubsub subscription",
          "required": true,
          "mapstructureTag": "subscription"
        },
        {
          "name": "Encoding",
          "type": "string",
          "description": "Lock down the encoding of the payload, leave empty for attribute based detection",
          "required": true,
          "mapstructureTag": "encoding"
        },
        {
          "name": "Compression",
          "type": "string",
          "description": "Lock down the compression of the payload, leave empty for attribute based detection",
          "required": true,
          "mapstructureTag": "compression"
        },
        {
          "name": "ClientID",
          "type": "string",
          "description": "The client id that will be used by Pubsub to make load balancing decisions",
          "required": true,
          "mapstructureTag": "client_id"
        }
      ],
      "imports": [
        "fmt",
        "regexp",
        "go.opentelemetry.io/collector/exporter/exporterhelper"
      ],
      "packageName": "googlecloudpubsubreceiver"
    }
  },
  {
    "name": "googlecloudspannerreceiver",
    "description": "Google Cloud Spanner enable you to investigate issues with your database by exposing via [Total and Top N built-in tables](https://cloud.google.com/spanner/docs/introspection): - Query statistics - Read statistics - Transaction statistics - Lock statistics - and others",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/googlecloudspannerreceiver/README.md"
  },
  {
    "name": "haproxyreceiver",
    "description": "The HAProxy receiver generates metrics by polling periodically the HAProxy process through a dedicated socket or HTTP URL.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/haproxyreceiver/README.md"
  },
  {
    "name": "hostmetricsreceiver",
    "description": "The Host Metrics receiver generates metrics about the host system scraped from various sources and host entity event as log. This is intended to be used when the collector is deployed as an agent.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/hostmetricsreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Scrapers",
          "type": "map[component.Type]component.Config",
          "description": "",
          "required": true,
          "mapstructureTag": "-"
        },
        {
          "name": "RootPath",
          "type": "string",
          "description": "RootPath is the host's root directory (linux only).",
          "required": true,
          "mapstructureTag": "root_path"
        },
        {
          "name": "MetadataCollectionInterval",
          "type": "time.Duration",
          "description": "Collection interval for metadata. Metadata of the particular entity is collected when the entity changes. In addition metadata of all entities is collected periodically even if no changes happen. Setting the duration to 0 will disable periodic collection (however will not impact metadata collection on changes).",
          "required": true,
          "mapstructureTag": "metadata_collection_interval"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "time",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/confmap",
        "go.opentelemetry.io/collector/confmap/xconfmap",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal"
      ],
      "packageName": "hostmetricsreceiver"
    }
  },
  {
    "name": "httpcheckreceiver",
    "description": "The HTTP Check Receiver can be used for synthetic checks against HTTP endpoints. This receiver will make a request to the specified `endpoint` using the configured `method`. This scraper generates a metric with a label for each HTTP response status class with a value of `1` if the status code matches the class. For example, the following metrics will be generated if the endpoint returned a `200`:",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/httpcheckreceiver/README.md"
  },
  {
    "name": "huaweicloudcesreceiver",
    "description": "This receiver contains the implementation of the Huawei Cloud [Cloud Eye Service](https://www.huaweicloud.com/intl/en-us/product/ces.html) (CES) receiver for the OpenTelemetry Collector. The receiver collects metrics from Huawei Cloud's CES service and sends them to the OpenTelemetry Collector for processing and exporting.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/huaweicloudcesreceiver/README.md"
  },
  {
    "name": "iisreceiver",
    "description": "The `iis` receiver grabs metrics about an IIS instance using the Windows Performance Counters. Because of this, it is a Windows only receiver.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/iisreceiver/README.md"
  },
  {
    "name": "influxdbreceiver",
    "description": "This receiver accepts metrics data as [InfluxDB Line Protocol](https://docs.influxdata.com/influxdb/v2.0/reference/syntax/line-protocol/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/influxdbreceiver/README.md"
  },
  {
    "name": "jaegerreceiver",
    "description": "Receives trace data in [Jaeger](https://www.jaegertracing.io/) format.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/jaegerreceiver/README.md"
  },
  {
    "name": "jmxreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/jmxreceiver/README.md"
  },
  {
    "name": "journaldreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/journaldreceiver/README.md"
  },
  {
    "name": "k8sclusterreceiver",
    "description": "The Kubernetes Cluster receiver collects cluster-level metrics and entity events from the Kubernetes API server. It uses the K8s API to listen for updates. A single instance of this receiver should be used to monitor a cluster.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8sclusterreceiver/README.md"
  },
  {
    "name": "k8seventsreceiver",
    "description": "The kubernetes Events receiver collects events from the Kubernetes API server. It collects all the new or updated events that come in.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8seventsreceiver/README.md"
  },
  {
    "name": "k8slogreceiver",
    "description": "Tails and parses logs in k8s environment.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8slogreceiver/README.md"
  },
  {
    "name": "k8sobjectsreceiver",
    "description": "The kubernetes Objects receiver collects(pull/watch) objects from the Kubernetes API server.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8sobjectsreceiver/README.md"
  },
  {
    "name": "kafkametricsreceiver",
    "description": "Kafka metrics receiver collects kafka metrics (brokers, topics, partitions, consumer groups) from kafka server, converting into otlp.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/kafkametricsreceiver/README.md"
  },
  {
    "name": "kafkareceiver",
    "description": "Kafka receiver receives traces, metrics, and logs from Kafka. Message payload encoding is configurable.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/kafkareceiver/README.md"
  },
  {
    "name": "kubeletstatsreceiver",
    "description": "The Kubelet Stats Receiver pulls node, pod, container, and volume metrics from the API server on a kubelet and sends it down the metric pipeline for further processing.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/kubeletstatsreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ExtraMetadataLabels",
          "type": "[]kubelet.MetadataLabel",
          "description": "ExtraMetadataLabels contains list of extra metadata that should be taken from /pods endpoint and put as extra labels on metrics resource. No additional metadata is fetched by default, so there are no extra calls to /pods endpoint. Supported values include container.id and k8s.volume.type.",
          "required": true,
          "mapstructureTag": "extra_metadata_labels"
        },
        {
          "name": "MetricGroupsToCollect",
          "type": "[]kubelet.MetricGroup",
          "description": "MetricGroupsToCollect provides a list of metrics groups to collect metrics from. \"container\", \"pod\", \"node\" and \"volume\" are the only valid groups.",
          "required": true,
          "mapstructureTag": "metric_groups"
        },
        {
          "name": "K8sAPIConfig",
          "type": "*k8sconfig.APIConfig",
          "description": "Configuration of the Kubernetes API client.",
          "required": true,
          "mapstructureTag": "k8s_api_config"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/confmap",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "k8s.io/client-go/kubernetes",
        "github.com/open-telemetry/opentelemetry-collector-contrib/internal/k8sconfig",
        "kube \"github.com/open-telemetry/opentelemetry-collector-contrib/internal/kubelet\"",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver/internal/kubelet",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver/internal/metadata"
      ],
      "packageName": "kubeletstatsreceiver"
    }
  },
  {
    "name": "libhoneyreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/libhoneyreceiver/README.md"
  },
  {
    "name": "lokireceiver",
    "description": "The Loki receiver implements the [Loki push api](https://grafana.com/docs/loki/latest/clients/promtail/#loki-push-api) as specified in [Loki HTTP API: Ingest logs](https://grafana.com/docs/loki/latest/reference/loki-http-api/#ingest-logs). It allows Promtail instances to specify the open telemetry collector as their lokiAddress.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/lokireceiver/README.md"
  },
  {
    "name": "memcachedreceiver",
    "description": "This receiver can fetch stats from a Memcached instance using the [stats command](https://github.com/memcached/memcached/wiki/Commands#statistics). A detailed description of all the stats available is at https://github.com/memcached/memcached/blob/master/doc/protocol.txt#L1159.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/memcachedreceiver/README.md"
  },
  {
    "name": "mongodbatlasreceiver",
    "description": "Receives metrics from [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) via their [monitoring APIs](https://docs.atlas.mongodb.com/reference/api/monitoring-and-logs/), as well as alerts via a configured [webhook](https://www.mongodb.com/docs/atlas/tutorial/third-party-service-integrations/) and events from [events APIs](https://www.mongodb.com/docs/atlas/reference/api/events/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/mongodbatlasreceiver/README.md"
  },
  {
    "name": "mongodbreceiver",
    "description": "This receiver fetches stats from a MongoDB instance using the [golang mongo driver](https://github.com/mongodb/mongo-go-driver). Stats are collected via MongoDB's `dbStats` and `serverStatus` commands.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/mongodbreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Hosts",
          "type": "[]confignet.TCPAddrConfig",
          "description": "MetricsBuilderConfig defines which metrics/attributes to enable for the scraper Deprecated - Transport option will be removed in v0.102.0",
          "required": true,
          "mapstructureTag": "hosts"
        },
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "ReplicaSet",
          "type": "string",
          "description": "",
          "required": false,
          "mapstructureTag": "replica_set,omitempty"
        },
        {
          "name": "Timeout",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "timeout"
        },
        {
          "name": "DirectConnection",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "direct_connection"
        }
      ],
      "imports": [
        "context",
        "errors",
        "fmt",
        "strings",
        "time",
        "go.mongodb.org/mongo-driver/mongo/options",
        "go.mongodb.org/mongo-driver/mongo/readpref",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/mongodbreceiver/internal/metadata"
      ],
      "packageName": "mongodbreceiver"
    }
  },
  {
    "name": "mysqlreceiver",
    "description": "This receiver queries MySQL's global status and InnoDB tables.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/mysqlreceiver/README.md"
  },
  {
    "name": "namedpipereceiver",
    "description": "This receiver supports opening a Unix Named Pipe (aka FIFO), and reading logs from it.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/namedpipereceiver/README.md"
  },
  {
    "name": "netflowreceiver",
    "description": "The netflow receiver can listen for [netflow](https://en.wikipedia.org/wiki/NetFlow), [sflow](https://en.wikipedia.org/wiki/SFlow), and [ipfix](https://en.wikipedia.org/wiki/IP_Flow_Information_Export) data and convert it to OpenTelemetry logs. The receiver is based on the [goflow2](https://github.com/netsampler/goflow2) project.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/netflowreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Scheme",
          "type": "string",
          "description": "The scheme defines the type of flow data that the listener will receive The scheme must be one of sflow, netflow, or flow",
          "required": true,
          "mapstructureTag": "scheme"
        },
        {
          "name": "Hostname",
          "type": "string",
          "description": "The hostname or IP address that the listener will bind to",
          "required": true,
          "mapstructureTag": "hostname"
        },
        {
          "name": "Port",
          "type": "int",
          "description": "The port that the listener will bind to",
          "required": true,
          "mapstructureTag": "port"
        },
        {
          "name": "Sockets",
          "type": "int",
          "description": "The number of sockets that the listener will use",
          "required": true,
          "mapstructureTag": "sockets"
        },
        {
          "name": "Workers",
          "type": "int",
          "description": "The number of workers that the listener will use to decode incoming flow messages By default it will be two times the number of sockets Ideally set this to the number of CPU cores",
          "required": true,
          "mapstructureTag": "workers"
        },
        {
          "name": "QueueSize",
          "type": "int",
          "description": "The size of the queue that the listener will use This is a buffer that will hold flow messages before they are processed by a worker",
          "required": true,
          "mapstructureTag": "queue_size"
        }
      ],
      "imports": [],
      "packageName": "netflowreceiver"
    }
  },
  {
    "name": "nginxreceiver",
    "description": "This receiver can fetch stats from a NGINX instance using the `ngx_http_stub_status_module` module's `status` endpoint.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/nginxreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/nginxreceiver/internal/metadata"
      ],
      "packageName": "nginxreceiver"
    }
  },
  {
    "name": "nsxtreceiver",
    "description": "This receiver fetches metrics important to run virtual networking using NSX-T. The receiver ingests metrics via the [NSX Rest API](https://docs.vmware.com/en/VMware-NSX-Data-Center-for-vSphere/6.4/nsx_64_api.pdf).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/nsxtreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/nsxtreceiver/internal/metadata"
      ],
      "packageName": "nsxtreceiver"
    }
  },
  {
    "name": "ntpreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/ntpreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Version",
          "type": "int",
          "description": "",
          "required": true,
          "mapstructureTag": "version"
        },
        {
          "name": "Endpoint",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "endpoint"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net",
        "time",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/ntpreceiver/internal/metadata"
      ],
      "packageName": "ntpreceiver"
    }
  },
  {
    "name": "opencensusreceiver",
    "description": ":warning: This component is deprecated, slated for removal in August 2025. Please use the OTLP receiver instead.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/opencensusreceiver/README.md"
  },
  {
    "name": "oracledbreceiver",
    "description": "This receiver collects metrics from an Oracle Database.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/oracledbreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "DataSource",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "datasource"
        },
        {
          "name": "Endpoint",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "Password",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "Service",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "service"
        },
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net",
        "net/url",
        "strconv",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/oracledbreceiver/internal/metadata"
      ],
      "packageName": "oracledbreceiver"
    }
  },
  {
    "name": "osqueryreceiver",
    "description": "The osquery receiver runs queries run on an [osquery](https://osquery.io/)'s daemon on a schedule and converts the output to logs.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/osqueryreceiver/README.md"
  },
  {
    "name": "otelarrowreceiver",
    "description": "Receives telemetry data using [OpenTelemetry Protocol with Apache Arrow](https://github.com/open-telemetry/otel-arrow) and standard [OTLP]( https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md) protocol via gRPC.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/otelarrowreceiver/README.md"
  },
  {
    "name": "otlpjsonfilereceiver",
    "description": "This receiver will read pipeline data from JSON files. The data is written in [Protobuf JSON encoding](https://developers.google.com/protocol-buffers/docs/proto3#json) using [OpenTelemetry protocol](https://github.com/open-telemetry/opentelemetry-proto).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/otlpjsonfilereceiver/README.md"
  },
  {
    "name": "podmanreceiver",
    "description": "The Podman Stats receiver queries the Podman service API to fetch stats for all running containers on a configured interval.  These stats are for container resource usage of cpu, memory, network, and the [blkio controller](https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/podmanreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Endpoint",
          "type": "string",
          "description": "The URL of the podman server.  Default is \"unix:///run/podman/podman.sock\"",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "APIVersion",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "api_version"
        },
        {
          "name": "SSHKey",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "ssh_key"
        },
        {
          "name": "SSHPassphrase",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "ssh_passphrase"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/podmanreceiver/internal/metadata"
      ],
      "packageName": "podmanreceiver"
    }
  },
  {
    "name": "postgresqlreceiver",
    "description": "This receiver queries the PostgreSQL [statistics collector](https://www.postgresql.org/docs/13/monitoring-stats.html).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/postgresqlreceiver/README.md"
  },
  {
    "name": "pprofreceiver",
    "description": "TODO",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/pprofreceiver/README.md"
  },
  {
    "name": "prometheusreceiver",
    "description": "Receives metric data in [Prometheus](https://prometheus.io/) format. See the [Design](DESIGN.md) for additional information on this receiver.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/prometheusreceiver/README.md"
  },
  {
    "name": "prometheusremotewritereceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/prometheusremotewritereceiver/README.md"
  },
  {
    "name": "pulsarreceiver",
    "description": "Pulsar receiver receives logs, metrics, and traces from [Apache Pulsar](https://pulsar.apache.org/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/pulsarreceiver/README.md"
  },
  {
    "name": "purefareceiver",
    "description": "The Pure Storage FlashArray receiver, receives metrics from the Pure Storage FlashArray.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/purefareceiver/README.md"
  },
  {
    "name": "purefbreceiver",
    "description": "The Pure Storage FlashBlade receiver, receives metrics from Pure Storage FlashBlade via the [Pure Storage FlashBlade OpenMetrics Exporter](https://github.com/PureStorage-OpenConnect/pure-fb-openmetrics-exporter)",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/purefbreceiver/README.md"
  },
  {
    "name": "rabbitmqreceiver",
    "description": "This receiver fetches stats from a RabbitMQ node using the [RabbitMQ Management Plugin](https://www.rabbitmq.com/management.html).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/rabbitmqreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/rabbitmqreceiver/internal/metadata"
      ],
      "packageName": "rabbitmqreceiver"
    }
  },
  {
    "name": "receivercreator",
    "description": "This receiver can instantiate other receivers at runtime based on whether observed endpoints match a configured rule. To use the receiver creator, you must first configure one or more [observers](../../extension/observer/README.md) that will discover networked endpoints that you may be interested in. The configured rules will be evaluated for each endpoint discovered. If the rule evaluates to true then the receiver for that rule will be started against the matched endpoint.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/receivercreator/README.md"
  },
  {
    "name": "redisreceiver",
    "description": "The Redis receiver is designed to retrieve Redis INFO data from a single Redis instance, build metrics from that data, and send them to the next consumer at a configurable interval.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/redisreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "TODO: Use one of the configs from core. The target endpoint. TODO allow users to add additional resource key value pairs? Optional username. Use the specified Username to authenticate the current connection with one of the connections defined in the ACL list when connecting to a Redis 6.0 instance, or greater, that is using the Redis ACL system.",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "Optional password. Must match the password specified in the requirepass server configuration option, or the user's password when connecting to a Redis 6.0 instance, or greater, that is using the Redis ACL system.",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "TLS",
          "type": "configtls.ClientConfig",
          "description": "",
          "required": false,
          "mapstructureTag": "tls,omitempty"
        },
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        }
      ],
      "imports": [
        "fmt",
        "net",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/redisreceiver/internal/metadata"
      ],
      "packageName": "redisreceiver"
    }
  },
  {
    "name": "riakreceiver",
    "description": "<!-- markdown-link-check-disable --><!-- Failing due to \"unable to verify the first certificate\" --> Riak metrics will be collected from the [/stats](https://docs.riak.com/riak/kv/2.2.3/developing/api/http/status) endpoint.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/riakreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "metrics"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/riakreceiver/internal/metadata"
      ],
      "packageName": "riakreceiver"
    }
  },
  {
    "name": "saphanareceiver",
    "description": "This receiver can fetch stats from a SAP HANA instance. It leverages the [driver](https://github.com/SAP/go-hdb) written by SAP for connecting to SAP HANA with the golang sql module to execute several monitoring queries.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/saphanareceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "MetricsBuilderConfig defines which metrics/attributes to enable for the scraper",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/saphanareceiver/internal/metadata"
      ],
      "packageName": "saphanareceiver"
    }
  },
  {
    "name": "sapmreceiver",
    "description": "**The SAPM receiver is deprecated and will be removed from the repository in April 2025.**",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/sapmreceiver/README.md"
  },
  {
    "name": "signalfxreceiver",
    "description": "The SignalFx receiver accepts:",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/signalfxreceiver/README.md"
  },
  {
    "name": "simpleprometheusreceiver",
    "description": "The `prometheus_simple` receiver is a wrapper around the [prometheus receiver](../prometheusreceiver). This receiver provides a simple configuration interface to configure the prometheus receiver to scrape metrics from a single target.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/simpleprometheusreceiver/README.md"
  },
  {
    "name": "skywalkingreceiver",
    "description": "Receives trace data and metric data in [Skywalking](https://skywalking.apache.org/) format.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/skywalkingreceiver/README.md"
  },
  {
    "name": "snmpreceiver",
    "description": "This receiver fetches stats from a SNMP enabled host using a [golang snmp client](https://github.com/gosnmp/gosnmp). Metrics are collected based upon different configurations in the config file.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/snmpreceiver/README.md"
  },
  {
    "name": "snowflakereceiver",
    "description": "This receiver collects metrics from a Snowflake account by connecting to and querying a Snowflake deployment.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/snowflakereceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        },
        {
          "name": "Account",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "account"
        },
        {
          "name": "Schema",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "schema"
        },
        {
          "name": "Warehouse",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "warehouse"
        },
        {
          "name": "Database",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "database"
        },
        {
          "name": "Role",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "role"
        }
      ],
      "imports": [
        "errors",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/snowflakereceiver/internal/metadata"
      ],
      "packageName": "snowflakereceiver"
    }
  },
  {
    "name": "solacereceiver",
    "description": "The Solace receiver receives trace data from a [Solace PubSub+ Event Broker](https://solace.com/products/event-broker/).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/solacereceiver/README.md"
  },
  {
    "name": "splunkenterprisereceiver",
    "description": "The Splunk Enterprise Receiver is a pull based tool which enables the ingestion of performance metrics describing the operational status of a user's Splunk Enterprise deployment to an appropriate observability tool. It is designed to leverage several different data sources to gather these metrics including the [introspection api endpoint](https://docs.splunk.com/Documentation/Splunk/9.1.1/RESTREF/RESTintrospect) and serializing results from ad-hoc searches. Because of this, care must be taken by users when enabling metrics as running searches can effect your Splunk Enterprise Deployment and introspection may fail to report for Splunk Cloud deployments. The primary purpose of this receiver is to empower those tasked with the maintenance and care of a Splunk Enterprise deployment to leverage opentelemetry and their observability toolset in their jobs.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/splunkenterprisereceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "IdxEndpoint",
          "type": "confighttp.ClientConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "indexer"
        },
        {
          "name": "SHEndpoint",
          "type": "confighttp.ClientConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "search_head"
        },
        {
          "name": "CMEndpoint",
          "type": "confighttp.ClientConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "cluster_master"
        }
      ],
      "imports": [
        "errors",
        "net/url",
        "strings",
        "go.opentelemetry.io/collector/config/confighttp",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/splunkenterprisereceiver/internal/metadata"
      ],
      "packageName": "splunkenterprisereceiver"
    }
  },
  {
    "name": "splunkhecreceiver",
    "description": "The Splunk HEC receiver accepts events in the [Splunk HEC format](https://docs.splunk.com/Documentation/Splunk/8.0.5/Data/FormateventsforHTTPEventCollector). This allows the collector to receive logs and metrics. The collector accepts data formatted as JSON [HEC events](https://docs.splunk.com/Documentation/Splunk/8.2.2/Data/FormateventsforHTTPEventCollector#Event_data) under any path or as EOL separated log [raw data](https://docs.splunk.com/Documentation/Splunk/8.2.2/Data/FormateventsforHTTPEventCollector#Raw_event_parsing) if sent to the `raw_path` path.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/splunkhecreceiver/README.md"
  },
  {
    "name": "sqlqueryreceiver",
    "description": "The SQL Query Receiver uses custom SQL queries to generate metrics from a database connection.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/sqlqueryreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "MaxOpenConn",
          "type": "int",
          "description": "The maximumn number of open connections to the sql server. <= 0 means unlimited",
          "required": true,
          "mapstructureTag": "max_open_conn"
        }
      ],
      "imports": [
        "time",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "github.com/open-telemetry/opentelemetry-collector-contrib/internal/sqlquery"
      ],
      "packageName": "sqlqueryreceiver"
    }
  },
  {
    "name": "sqlserverreceiver",
    "description": "The `sqlserver` receiver grabs metrics/logs about a Microsoft SQL Server instance. The receiver works by either using the Windows Performance Counters, or by directly connecting to the instance and querying it. Windows Performance Counters are only available when running on Windows.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/sqlserverreceiver/README.md"
  },
  {
    "name": "sshcheckreceiver",
    "description": "This receiver creates stats by connecting to an SSH server which may be an SFTP server.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/sshcheckreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "CheckSFTP",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "check_sftp"
        },
        {
          "name": "MetricsBuilderConfig",
          "type": "metadata.MetricsBuilderConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        }
      ],
      "imports": [
        "errors",
        "net",
        "strings",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sshcheckreceiver/internal/configssh",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sshcheckreceiver/internal/metadata"
      ],
      "packageName": "sshcheckreceiver"
    }
  },
  {
    "name": "statsdreceiver",
    "description": "StatsD receiver for ingesting StatsD messages(https://github.com/statsd/statsd/blob/master/docs/metric_types.md) into the OpenTelemetry Collector.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/statsdreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "NetAddr",
          "type": "confignet.AddrConfig",
          "description": "",
          "required": true,
          "mapstructureTag": ",squash"
        },
        {
          "name": "AggregationInterval",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "aggregation_interval"
        },
        {
          "name": "EnableIPOnlyAggregation",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "enable_ip_only_aggregation"
        },
        {
          "name": "EnableMetricType",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "enable_metric_type"
        },
        {
          "name": "EnableSimpleTags",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "enable_simple_tags"
        },
        {
          "name": "IsMonotonicCounter",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "is_monotonic_counter"
        },
        {
          "name": "TimerHistogramMapping",
          "type": "[]protocol.TimerHistogramMapping",
          "description": "",
          "required": true,
          "mapstructureTag": "timer_histogram_mapping"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "time",
        "github.com/lightstep/go-expohisto/structure",
        "go.opentelemetry.io/collector/config/confignet",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/statsdreceiver/protocol"
      ],
      "packageName": "statsdreceiver"
    }
  },
  {
    "name": "stefreceiver",
    "description": "The STEF receiver runs a gRPC server accepting data using the Sequential Tabular Encoding Format (STEF).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/stefreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "AckInterval",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "ack_interval"
        }
      ],
      "imports": [
        "time",
        "go.opentelemetry.io/collector/config/configgrpc"
      ],
      "packageName": "stefreceiver"
    }
  },
  {
    "name": "syslogreceiver",
    "description": "Parses Syslogs received over TCP or UDP.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/syslogreceiver/README.md"
  },
  {
    "name": "systemdreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/systemdreceiver/README.md"
  },
  {
    "name": "tcpcheckreceiver",
    "description": "This receiver creates stats by connecting to an TCP server.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/tcpcheckreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Targets",
          "type": "[]*confignet.TCPAddrConfig",
          "description": "",
          "required": true,
          "mapstructureTag": "targets"
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "net",
        "strconv",
        "strings",
        "go.opentelemetry.io/collector/config/confignet",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/tcpcheckreceiver/internal/metadata"
      ],
      "packageName": "tcpcheckreceiver"
    }
  },
  {
    "name": "tcplogreceiver",
    "description": "Receives logs over TCP.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/tcplogreceiver/README.md"
  },
  {
    "name": "tlscheckreceiver",
    "description": "Emit metrics about x.509 certificates.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/tlscheckreceiver/README.md"
  },
  {
    "name": "udplogreceiver",
    "description": "Receives logs over UDP.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/udplogreceiver/README.md"
  },
  {
    "name": "vcenterreceiver",
    "description": "This receiver fetches metrics from a vCenter or ESXi host running VMware vSphere APIs.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/vcenterreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Endpoint",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "endpoint"
        },
        {
          "name": "Username",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "username"
        },
        {
          "name": "Password",
          "type": "configopaque.String",
          "description": "",
          "required": true,
          "mapstructureTag": "password"
        }
      ],
      "imports": [
        "context",
        "errors",
        "fmt",
        "net/url",
        "go.opentelemetry.io/collector/config/configopaque",
        "go.opentelemetry.io/collector/config/configtls",
        "go.opentelemetry.io/collector/scraper/scraperhelper",
        "go.uber.org/multierr",
        "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/vcenterreceiver/internal/metadata"
      ],
      "packageName": "vcenterreceiver"
    }
  },
  {
    "name": "wavefrontreceiver",
    "description": "The Wavefront receiver accepts metrics and depends on [carbonreceiver proto and transport](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/carbonreceiver), It's very similar to Carbon: it is TCP based in which each received text line represents a single metric data point. They differ on the format of their textual representation. The Wavefront receiver leverages the Carbon receiver code by implementing a dedicated parser for its format.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/wavefrontreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "TCPIdleTimeout",
          "type": "time.Duration",
          "description": "TCPIdleTimeout is the timeout for idle TCP connections.",
          "required": true,
          "mapstructureTag": "tcp_idle_timeout"
        },
        {
          "name": "ExtractCollectdTags",
          "type": "bool",
          "description": "ExtractCollectdTags instructs the Wavefront receiver to attempt to extract tags in the CollectD format from the metric name. The default is false.",
          "required": true,
          "mapstructureTag": "extract_collectd_tags"
        }
      ],
      "imports": [
        "errors",
        "time",
        "go.opentelemetry.io/collector/config/confignet"
      ],
      "packageName": "wavefrontreceiver"
    }
  },
  {
    "name": "webhookeventreceiver",
    "description": "The Webhook Event Receiver is a push based event collector component meant to act as a generally available receiver for any webhook style data source. It is designed to work alongside other pipeline components like the [transform processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor) to allow the ingestion of generic events as logs into the opentelemetry collector.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/webhookeventreceiver/README.md"
  },
  {
    "name": "windowseventlogreceiver",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/windowseventlogreceiver/README.md"
  },
  {
    "name": "windowsperfcountersreceiver",
    "description": "This receiver, for Windows only, captures the configured system, application, or custom performance counter data from the Windows registry using the [PDH interface](https://docs.microsoft.com/en-us/windows/win32/perfctrs/using-the-pdh-functions-to-consume-counter-data). It is based on the [Telegraf Windows Performance Counters Input Plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/windowsperfcountersreceiver/README.md"
  },
  {
    "name": "windowsservicereceiver",
    "description": "The Windows Service Receiver is a receiver for scraping information about the state of services running on a Windows machine.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/windowsservicereceiver/README.md"
  },
  {
    "name": "zipkinreceiver",
    "description": "This receiver receives spans from [Zipkin](https://zipkin.io/) (V1 and V2).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/zipkinreceiver/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ParseStringTags",
          "type": "bool",
          "description": "Configures the receiver server protocol. If enabled the zipkin receiver will attempt to parse string tags/binary annotations into int/bool/float. Disabled by default",
          "required": true,
          "mapstructureTag": "parse_string_tags"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confighttp"
      ],
      "packageName": "zipkinreceiver"
    }
  },
  {
    "name": "zookeeperreceiver",
    "description": "The Zookeeper receiver collects metrics from a Zookeeper instance, using the `mntr` command. The `mntr` 4 letter word command needs to be enabled for the receiver to be able to collect metrics.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/zookeeperreceiver/README.md"
  }
]