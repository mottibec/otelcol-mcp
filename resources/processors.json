[
  {
    "name": "attributesprocessor",
    "description": "The attributes processor modifies attributes of a span, log, or metric. Please refer to [config.go](./config.go) for the config spec.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/attributesprocessor/README.md"
  },
  {
    "name": "coralogixprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/coralogixprocessor/README.md"
  },
  {
    "name": "cumulativetodeltaprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/cumulativetodeltaprocessor/README.md"
  },
  {
    "name": "datadogsemanticsprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/datadogsemanticsprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "OverrideIncomingDatadogFields",
          "type": "bool",
          "description": "OverrideIncomingDatadogFields specifies what is done with incoming Datadog fields. If it is false, any fields namespaced with \"datadog.\" will pass through unchanged. If it is true, all fields in the \"datadog.\" namespace will be recomputed by the processor. Default: false.",
          "required": true,
          "mapstructureTag": "override_incoming_datadog_fields"
        }
      ],
      "imports": [],
      "packageName": "datadogsemanticsprocessor"
    }
  },
  {
    "name": "deltatocumulativeprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/deltatocumulativeprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "MaxStale",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "max_stale"
        },
        {
          "name": "MaxStreams",
          "type": "int",
          "description": "",
          "required": true,
          "mapstructureTag": "max_streams"
        }
      ],
      "imports": [
        "context",
        "fmt",
        "math",
        "time",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/confmap/xconfmap",
        "telemetry \"github.com/open-telemetry/opentelemetry-collector-contrib/processor/deltatocumulativeprocessor/internal/telemetry\""
      ],
      "packageName": "deltatocumulativeprocessor"
    }
  },
  {
    "name": "deltatorateprocessor",
    "description": "**Status: under development; Not recommended for production usage.**",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/deltatorateprocessor/README.md"
  },
  {
    "name": "filterprocessor",
    "description": "The filterprocessor allows dropping spans, span events, metrics, datapoints, and logs from the collector.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/filterprocessor/README.md"
  },
  {
    "name": "geoipprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/geoipprocessor/README.md"
  },
  {
    "name": "groupbyattrsprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/groupbyattrsprocessor/README.md"
  },
  {
    "name": "groupbytraceprocessor",
    "description": "This processor collects all the spans from the same trace, waiting a pre-determined amount of time before releasing the trace to the next processor. The expectation is that, generally, traces will be complete after the given time.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/groupbytraceprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "NumTraces",
          "type": "int",
          "description": "NumTraces is the max number of traces to keep in memory waiting for the duration. Default: 1_000_000.",
          "required": true,
          "mapstructureTag": "num_traces"
        },
        {
          "name": "NumWorkers",
          "type": "int",
          "description": "NumWorkers is a number of workers processing event queue. Default: 1.",
          "required": true,
          "mapstructureTag": "num_workers"
        },
        {
          "name": "WaitDuration",
          "type": "time.Duration",
          "description": "WaitDuration tells the processor to wait for the specified duration for the trace to be complete. Default: 1s.",
          "required": true,
          "mapstructureTag": "wait_duration"
        },
        {
          "name": "DiscardOrphans",
          "type": "bool",
          "description": "DiscardOrphans instructs the processor to discard traces without the root span. This typically indicates that the trace is incomplete. Default: false. Not yet implemented, and an error will be returned when this option is used.",
          "required": true,
          "mapstructureTag": "discard_orphans"
        },
        {
          "name": "StoreOnDisk",
          "type": "bool",
          "description": "StoreOnDisk tells the processor to keep only the trace ID in memory, serializing the trace spans to disk. Useful when the duration to wait for traces to complete is high. Default: false. Not yet implemented, and an error will be returned when this option is used.",
          "required": true,
          "mapstructureTag": "store_on_disk"
        }
      ],
      "imports": [
        "time"
      ],
      "packageName": "groupbytraceprocessor"
    }
  },
  {
    "name": "intervalprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/intervalprocessor/README.md"
  },
  {
    "name": "k8sattributesprocessor",
    "description": "Kubernetes attributes processor allow automatic setting of spans, metrics and logs resource attributes with k8s metadata.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/README.md"
  },
  {
    "name": "logdedupprocessor",
    "description": "This processor is used to deduplicate logs by detecting identical logs over a range of time and emitting a single log with the count of logs that were deduplicated.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/logdedupprocessor/README.md"
  },
  {
    "name": "logstransformprocessor",
    "description": "NOTE - This processor is experimental, with the intention that its functionality will be reimplemented in the [transform processor](../transformprocessor/README.md) in the future. For this reason, the processor is not included in the `contrib` distribution.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/logstransformprocessor/README.md"
  },
  {
    "name": "metricsgenerationprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/metricsgenerationprocessor/README.md"
  },
  {
    "name": "metricstarttimeprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/metricstarttimeprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Strategy",
          "type": "string",
          "description": "",
          "required": true,
          "mapstructureTag": "strategy"
        },
        {
          "name": "GCInterval",
          "type": "time.Duration",
          "description": "",
          "required": true,
          "mapstructureTag": "gc_interval"
        }
      ],
      "imports": [
        "fmt",
        "time",
        "go.opentelemetry.io/collector/component",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstarttimeprocessor/internal/subtractinitial",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstarttimeprocessor/internal/truereset"
      ],
      "packageName": "metricstarttimeprocessor"
    }
  },
  {
    "name": "metricstransformprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/metricstransformprocessor/README.md"
  },
  {
    "name": "probabilisticsamplerprocessor",
    "description": "The probabilistic sampler processor supports several modes of sampling for spans and log records.  Sampling is performed on a per-request basis, considering individual items statelessly.  For whole trace sampling, see [tailsamplingprocessor](../tailsamplingprocessor/README.md).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/probabilisticsamplerprocessor/README.md"
  },
  {
    "name": "redactionprocessor",
    "description": "This processor deletes span, log, and metric datapoint attributes that don't match a list of allowed attributes. It also masks attribute values that match a blocked value list. Attributes that aren't on the allowed list are removed before any value checks are done.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/redactionprocessor/README.md"
  },
  {
    "name": "remotetapprocessor",
    "description": "The Remote Tap processor, which can be positioned anywhere in a pipeline, allows data to pass through to the next component. Simultaneously, it makes a portion of the data accessible to WebSocket clients connecting on a configurable port. This functionality resembles that of the Unix `tee` command, which enables data to flow through while duplicating and redirecting it for inspection.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/remotetapprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "Limit",
          "type": "rate.Limit",
          "description": "Limit is a float that indicates the maximum number of messages repeated through the websocket by this processor in messages per second. Defaults to 1.",
          "required": true,
          "mapstructureTag": "limit"
        }
      ],
      "imports": [
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/config/confighttp",
        "golang.org/x/time/rate",
        "github.com/open-telemetry/opentelemetry-collector-contrib/internal/common/testutil"
      ],
      "packageName": "remotetapprocessor"
    }
  },
  {
    "name": "resourcedetectionprocessor",
    "description": "The resource detection processor can be used to detect resource information from the host, in a format that conforms to the [OpenTelemetry resource semantic conventions](https://github.com/open-telemetry/semantic-conventions/tree/main/docs/resource), and append or override the resource value in telemetry data with this information.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md"
  },
  {
    "name": "resourceprocessor",
    "description": "The resource processor can be used to apply changes on resource attributes. Please refer to [config.go](./config.go) for the config spec.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourceprocessor/README.md"
  },
  {
    "name": "routingprocessor",
    "description": "No description available",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/routingprocessor/README.md"
  },
  {
    "name": "schemaprocessor",
    "description": "The _Schema Processor_ is used to convert existing telemetry data or signals to a version of the semantic convention defined as part of the configuration. The processor works by using a set of target schema URLs that are used to match incoming signals. On a match, the processor will fetch the schema translation file (if not cached) set by the incoming signal and apply the transformations required to export as the target semantic convention version.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/schemaprocessor/README.md"
  },
  {
    "name": "spanprocessor",
    "description": "The span processor modifies the span name based on its attributes or extract span attributes from the span name. It also allows to change span status. Please refer to [config.go](./config.go) for the config spec.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/spanprocessor/README.md"
  },
  {
    "name": "sumologicprocessor",
    "description": "The Sumo Logic processor (config name: `sumologic`) modifies the metadata on logs, metrics and traces sent to [Sumo Logic][sumologic_webpage] so that the Sumo Logic [apps][sumologic_apps] can make full use of the ingested data.",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/sumologicprocessor/README.md"
  },
  {
    "name": "tailsamplingprocessor",
    "description": "The tail sampling processor samples traces based on a set of defined policies. All spans for a given trace MUST be received by the same collector instance for effective sampling decisions. Before performing sampling, spans will be grouped by `trace_id`. Therefore, the tail sampling processor can be used directly without the need for the [`groupbytraceprocessor`](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/groupbytraceprocessor).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/tailsamplingprocessor/README.md"
  },
  {
    "name": "transformprocessor",
    "description": "> [!NOTE] > This documentation applies only to version `0.120.0` and later. **Configuration from previous version is still supported**, but no longer documented in this README. For information on earlier versions, please refer to the previous [documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/release/0.119.x/processor/transformprocessor/README.md).",
    "stability": "Unknown",
    "readmeUrl": "https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/transformprocessor/README.md",
    "configSchema": {
      "fields": [
        {
          "name": "ErrorMode",
          "type": "ottl.ErrorMode",
          "description": "ErrorMode determines how the processor reacts to errors that occur while processing a statement. Valid values are `ignore` and `propagate`. `ignore` means the processor ignores errors returned by statements and continues on to the next statement. This is the recommended mode. `propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector. The default value is `propagate`.",
          "required": true,
          "mapstructureTag": "error_mode"
        },
        {
          "name": "TraceStatements",
          "type": "[]common.ContextStatements",
          "description": "",
          "required": true,
          "mapstructureTag": "trace_statements"
        },
        {
          "name": "MetricStatements",
          "type": "[]common.ContextStatements",
          "description": "",
          "required": true,
          "mapstructureTag": "metric_statements"
        },
        {
          "name": "LogStatements",
          "type": "[]common.ContextStatements",
          "description": "",
          "required": true,
          "mapstructureTag": "log_statements"
        },
        {
          "name": "FlattenData",
          "type": "bool",
          "description": "",
          "required": true,
          "mapstructureTag": "flatten_data"
        },
        {
          "name": "logger",
          "type": "*zap.Logger",
          "description": "",
          "required": true
        }
      ],
      "imports": [
        "errors",
        "fmt",
        "reflect",
        "go.opentelemetry.io/collector/component",
        "go.opentelemetry.io/collector/confmap",
        "go.opentelemetry.io/collector/featuregate",
        "go.uber.org/multierr",
        "go.uber.org/zap",
        "github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor/internal/common",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor/internal/logs",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor/internal/metrics",
        "github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor/internal/traces"
      ],
      "packageName": "transformprocessor"
    }
  }
]